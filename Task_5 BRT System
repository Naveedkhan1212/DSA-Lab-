#include<iostream>
using namespace std;
                 // Lab 5 Task.........................................
struct Node{      // BRT Peshawar Passangers program through LinkedList
	
	int data;
	Node* next;
	
	Node(int d): data(d),next(nullptr) {}
	
};
class LinkedList{
	private:
		Node* head;
		public:
			LinkedList(): head(nullptr){}
			
		~LinkedList()
		{
			Node* current=head;
			while(current!=nullptr)
			{
				Node* nextNode=current->next;
				delete current;
				current=nextNode;
				
			}
		}
		void insertAtBeginning(int value)
		{
			Node* newNode=new Node(value);
			newNode->next=head;
			head=newNode;
			
		}
		
		void insertAtEnd(int value)
		{
			Node* newNode=new Node(value);
			if(head==nullptr)
			{
				head=newNode;
				return;
			}
			Node* temp=head;
			while(temp->next!=nullptr)
			{
				temp=temp->next;
			}
			temp->next=newNode;
			
		}
		void insertAtposition(int value,int pos)
		{
			if(pos<=1)
			{
				insertAtBeginning(value);
				return;
			}
			Node* newNode = new Node(value);
        Node* temp = head;

        for (int i = 1; i < pos - 1 && temp != nullptr; i++) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "⚠️ Position out of range. Inserting at end.\n";
            insertAtEnd(value);
            return;
        }

        newNode->next = temp->next;
        temp->next = newNode;
    }

    // deleting from beiginnning.......................................
    bool deleteFromBeginning(int* removedValue = nullptr) {
        if (head == nullptr) {
            cout << "Queue is empty! No passenger to board.\n";
            return false;
        }

        Node* temp = head;
        if (removedValue != nullptr) {
            *removedValue = temp->data;
            cout << "Passenger " << *removedValue << " boarded the bus.\n";
        }
        head = head->next;
        delete temp;
        return true;
    }

    // Display current queue................................................................
    void display() const {
        if (head == nullptr) {
            cout << "Queue is empty.\n";
            return;
        }
        cout << "Passenger Queue: ";
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};


int main() {
    LinkedList list;

    // Adding three passagners at the end...................***********************************
    list.insertAtEnd(101);
    list.insertAtEnd(102);
    list.insertAtEnd(103);
    cout << "Initial Queue after adding passengers:"<<endl;
    list.display();

    // To add Emergency Passangers...................************************************8
    list.insertAtBeginning(999);
    cout << "After adding an emergency passenger at beginning:"<<endl;
    list.display();

    // Adding Special Passagners on the location 2 .....................................***********
    list.insertAtposition(555, 2);
    cout << "After inserting special booking passenger at position 2:"<<endl;
    list.display();

    //  First passenger boards (delete from beginning)**************************************************
    int removed;
    list.deleteFromBeginning(&removed);
    cout << "After first passenger boards (deletion):"<<endl;
    list.display();

    return 0;
	}
 
